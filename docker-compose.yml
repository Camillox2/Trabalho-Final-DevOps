services:
  auth-api:
    build: ./auth-api
    container_name: auth_api_service
    ports:
      - "3001:3000"
    networks:
      - chat_network
    environment:
      DB_HOST: postgres_db
      DB_PORT: 5432
      DB_NAME: ${POSTGRES_DB}
      DB_USER: ${POSTGRES_USER}
      DB_PASSWORD: ${POSTGRES_PASSWORD}
    depends_on:
      postgres_db:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  record-api:
    build: ./record-api
    container_name: record_api_service
    ports:
      - "5002:5002"
    networks:
      - chat_network
    environment:
      DB_HOST: postgres_db
      DB_PORT: 5432
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      REDIS_HOST: redis_cache
      REDIS_PORT: 6379
    depends_on:
      postgres_db:
        condition: service_healthy
      redis_cache:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5002/health"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 60s

  receive-send-api:
    build: ./receive-send-api
    container_name: receive_send_api_service
    ports:
      - "3002:3002"
    networks:
      - chat_network
    environment:
      AUTH_API_URL: http://auth-api:3001
      RECORD_API_URL: http://record-api:5002
      REDIS_HOST: redis_cache
      REDIS_PORT: 6379
      DB_HOST: postgres_db # Usado se o Node se conectar diretamente
      DB_PORT: 5432 # Usado se o Node se conectar diretamente
      POSTGRES_DB: ${POSTGRES_DB} # Para consistÃªncia e se o Node precisar
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    depends_on:
      auth-api:
        condition: service_healthy
      record-api:
        condition: service_healthy
      redis_cache:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  postgres_db:
    image: postgres:14-alpine
    container_name: postgres_db_service
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-admin_user} # Default alinhado com .env
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-supersecretpassword} # Default alinhado
      POSTGRES_DB: ${POSTGRES_DB:-chat_application_db} # Default alinhado
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    networks:
      - chat_network
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "pg_isready -U $${POSTGRES_USER:-admin_user} -d $${POSTGRES_DB:-chat_application_db} -q",
        ]
      interval: 5s
      timeout: 5s
      retries: 10
      start_period: 10s
    restart: unless-stopped

  redis_cache:
    image: redis:7-alpine
    container_name: redis_cache_service
    ports:
      - "6379:6379"
    networks:
      - chat_network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 5s
      retries: 5
      start_period: 5s
    restart: unless-stopped

networks:
  chat_network:
    driver: bridge

volumes:
  postgres_data:
